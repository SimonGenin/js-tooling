import { Component, ComponentConstructor } from "./component";
import { ComponentNode } from "./component_node";
import { MountOptions } from "./fibers";
import { Scheduler } from "./scheduler";
import { TemplateSet, TemplateSetConfig } from "./template_set";
import { validateTarget } from "./utils";
export interface Env {
    [key: string]: any;
}
export interface AppConfig<P, E> extends TemplateSetConfig {
    props?: P;
    env?: E;
    test?: boolean;
    warnIfNoStaticProps?: boolean;
}
export declare const DEV_MSG: () => string;
export declare class App<T extends abstract new (...args: any) => any = any, P extends object = any, E = any> extends TemplateSet {
    static validateTarget: typeof validateTarget;
    Root: ComponentConstructor<P, E>;
    props: P;
    env: E;
    scheduler: Scheduler;
    root: ComponentNode<P, E> | null;
    warnIfNoStaticProps: boolean;
    constructor(Root: ComponentConstructor<P, E>, config?: AppConfig<P, E>);
    mount(target: HTMLElement, options?: MountOptions): Promise<Component<P, E> & InstanceType<T>>;
    makeNode(Component: ComponentConstructor, props: any): ComponentNode;
    mountNode(node: ComponentNode, target: HTMLElement, options?: MountOptions): any;
    destroy(): void;
}
export declare function mount<T extends abstract new (...args: any) => any = any, P extends object = any, E = any>(C: T & ComponentConstructor<P, E>, target: HTMLElement, config?: AppConfig<P, E> & MountOptions): Promise<Component<P, E> & InstanceType<T>>;
