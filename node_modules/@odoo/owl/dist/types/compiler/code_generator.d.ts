import { AST, ASTComment, ASTComponent, ASTDebug, ASTDomNode, ASTLog, ASTMulti, ASTSlot, ASTTCall, ASTTCallBlock, ASTTEsc, ASTText, ASTTForEach, ASTTif, ASTTKey, ASTTOut, ASTTSet, ASTTranslation, ASTTPortal, EventHandlers } from "./parser";
declare type BlockType = "block" | "text" | "multi" | "list" | "html" | "comment";
export interface Config {
    translateFn?: (s: string) => string;
    translatableAttributes?: string[];
    dev?: boolean;
}
export interface CodeGenOptions extends Config {
    hasSafeContext?: boolean;
    name?: string;
}
declare class BlockDescription {
    static nextBlockId: number;
    varName: string;
    blockName: string;
    dynamicTagName: string | null;
    isRoot: boolean;
    hasDynamicChildren: boolean;
    children: BlockDescription[];
    data: string[];
    dom?: Node;
    currentDom?: Element;
    childNumber: number;
    target: CodeTarget;
    type: BlockType;
    parentVar: string;
    id: number;
    constructor(target: CodeTarget, type: BlockType);
    insertData(str: string, prefix?: string): number;
    insert(dom: Node): void;
    generateExpr(expr: string): string;
    asXmlString(): string;
}
interface Context {
    block: BlockDescription | null;
    index: number | string;
    forceNewBlock: boolean;
    preventRoot?: boolean;
    isLast?: boolean;
    translate: boolean;
    tKeyExpr: string | null;
    nameSpace?: string;
    tModelSelectedExpr?: string;
}
declare class CodeTarget {
    name: string;
    indentLevel: number;
    loopLevel: number;
    code: string[];
    hasRoot: boolean;
    hasCache: boolean;
    hasRef: boolean;
    refInfo: {
        [name: string]: [string, string];
    };
    shouldProtectScope: boolean;
    on: EventHandlers | null;
    constructor(name: string, on?: EventHandlers | null);
    addLine(line: string, idx?: number): void;
    generateCode(): string;
}
export declare class CodeGenerator {
    blocks: BlockDescription[];
    nextBlockId: number;
    hasSafeContext: boolean;
    isDebug: boolean;
    targets: CodeTarget[];
    target: CodeTarget;
    templateName?: string;
    dev: boolean;
    translateFn: (s: string) => string;
    translatableAttributes: string[];
    ast: AST;
    staticDefs: {
        id: string;
        expr: string;
    }[];
    helpers: Set<string>;
    constructor(ast: AST, options: CodeGenOptions);
    generateCode(): string;
    compileInNewTarget(prefix: string, ast: AST, ctx: Context, on?: EventHandlers | null): string;
    addLine(line: string, idx?: number): void;
    define(varName: string, expr: string): void;
    insertAnchor(block: BlockDescription): void;
    createBlock(parentBlock: BlockDescription | null, type: BlockType, ctx: Context): BlockDescription;
    insertBlock(expression: string, block: BlockDescription, ctx: Context): void;
    /**
     * Captures variables that are used inside of an expression. This is useful
     * because in compiled code, almost all variables are accessed through the ctx
     * object. In the case of functions, that lookup in the context can be delayed
     * which can cause issues if the value has changed since the function was
     * defined.
     *
     * @param expr the expression to capture
     * @param forceCapture whether the expression should capture its scope even if
     *  it doesn't contain a function. Useful when the expression will be used as
     *  a function body.
     * @returns a new expression that uses the captured values
     */
    captureExpression(expr: string, forceCapture?: boolean): string;
    compileAST(ast: AST, ctx: Context): void;
    compileDebug(ast: ASTDebug, ctx: Context): void;
    compileLog(ast: ASTLog, ctx: Context): void;
    compileComment(ast: ASTComment, ctx: Context): void;
    compileText(ast: ASTText, ctx: Context): void;
    generateHandlerCode(rawEvent: string, handler: string): string;
    compileTDomNode(ast: ASTDomNode, ctx: Context): void;
    compileTEsc(ast: ASTTEsc, ctx: Context): void;
    compileTOut(ast: ASTTOut, ctx: Context): void;
    compileTIf(ast: ASTTif, ctx: Context, nextNode?: ASTDomNode): void;
    compileTForeach(ast: ASTTForEach, ctx: Context): void;
    compileTKey(ast: ASTTKey, ctx: Context): void;
    compileMulti(ast: ASTMulti, ctx: Context): void;
    compileTCall(ast: ASTTCall, ctx: Context): void;
    compileTCallBlock(ast: ASTTCallBlock, ctx: Context): void;
    compileTSet(ast: ASTTSet, ctx: Context): void;
    generateComponentKey(): string;
    /**
     * Formats a prop name and value into a string suitable to be inserted in the
     * generated code. For example:
     *
     * Name              Value            Result
     * ---------------------------------------------------------
     * "number"          "state"          "number: ctx['state']"
     * "something"       ""               "something: undefined"
     * "some-prop"       "state"          "'some-prop': ctx['state']"
     * "onClick.bind"    "onClick"        "onClick: bind(ctx, ctx['onClick'])"
     */
    formatProp(name: string, value: string): string;
    formatPropObject(obj: {
        [prop: string]: any;
    }): string[];
    getPropString(props: string[], dynProps: string | null): string;
    compileComponent(ast: ASTComponent, ctx: Context): void;
    wrapWithEventCatcher(expr: string, on: EventHandlers): string;
    compileTSlot(ast: ASTSlot, ctx: Context): void;
    compileTTranslation(ast: ASTTranslation, ctx: Context): void;
    compileTPortal(ast: ASTTPortal, ctx: Context): void;
}
export {};
